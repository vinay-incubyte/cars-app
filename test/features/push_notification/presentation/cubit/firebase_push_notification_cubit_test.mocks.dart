// Mocks generated by Mockito 5.4.6 from annotations
// in cars_app/test/features/push_notification/presentation/cubit/firebase_push_notification_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cars_app/core/failure.dart' as _i6;
import 'package:cars_app/features/push_notification/domain/respositories/push_notification_repository.dart'
    as _i2;
import 'package:cars_app/features/push_notification/domain/usecases/get_fcm_token_usecase.dart'
    as _i4;
import 'package:cars_app/features/push_notification/domain/usecases/push_notification_permission_usecase.dart'
    as _i7;
import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i8;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i9;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i11;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart'
    as _i13;
import 'package:flutter_local_notifications/src/types.dart' as _i14;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:timezone/timezone.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePushNotificationRepository_0 extends _i1.SmartFake
    implements _i2.PushNotificationRepository {
  _FakePushNotificationRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetFcmTokenUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFcmTokenUsecase extends _i1.Mock
    implements _i4.GetFcmTokenUsecase {
  MockGetFcmTokenUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PushNotificationRepository get pushNotificationRepository =>
      (super.noSuchMethod(
            Invocation.getter(#pushNotificationRepository),
            returnValue: _FakePushNotificationRepository_0(
              this,
              Invocation.getter(#pushNotificationRepository),
            ),
          )
          as _i2.PushNotificationRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
              _FakeEither_1<_i6.Failure, String>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [PushNotificationPermissionUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushNotificationPermissionUsecase extends _i1.Mock
    implements _i7.PushNotificationPermissionUsecase {
  MockPushNotificationPermissionUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PushNotificationRepository get pushNotificationRepository =>
      (super.noSuchMethod(
            Invocation.getter(#pushNotificationRepository),
            returnValue: _FakePushNotificationRepository_0(
              this,
              Invocation.getter(#pushNotificationRepository),
            ),
          )
          as _i2.PushNotificationRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
              _FakeEither_1<_i6.Failure, bool>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i8.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool?> initialize(
    _i9.InitializationSettings? initializationSettings, {
    _i10.DidReceiveNotificationResponseCallback?
    onDidReceiveNotificationResponse,
    _i10.DidReceiveBackgroundNotificationResponseCallback?
    onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse:
                    onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse:
                    onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i5.Future<bool?>.value(),
          )
          as _i5.Future<bool?>);

  @override
  _i5.Future<_i10.NotificationAppLaunchDetails?>
  getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationAppLaunchDetails, []),
            returnValue: _i5.Future<_i10.NotificationAppLaunchDetails?>.value(),
          )
          as _i5.Future<_i10.NotificationAppLaunchDetails?>);

  @override
  _i5.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i11.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #show,
              [id, title, body, notificationDetails],
              {#payload: payload},
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id], {#tag: tag}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cancelAll() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cancelAllPendingNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAllPendingNotifications, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i12.TZDateTime? scheduledDate,
    _i11.NotificationDetails? notificationDetails, {
    required _i13.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i14.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {
                #androidScheduleMode: androidScheduleMode,
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents,
              },
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i10.RepeatInterval? repeatInterval,
    _i11.NotificationDetails? notificationDetails, {
    required _i13.AndroidScheduleMode? androidScheduleMode,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval, notificationDetails],
              {#androidScheduleMode: androidScheduleMode, #payload: payload},
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval,
    _i11.NotificationDetails? notificationDetails, {
    _i13.AndroidScheduleMode? androidScheduleMode =
        _i13.AndroidScheduleMode.exact,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShowWithDuration,
              [id, title, body, repeatDurationInterval, notificationDetails],
              {#androidScheduleMode: androidScheduleMode, #payload: payload},
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i10.PendingNotificationRequest>>
  pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue:
                _i5.Future<List<_i10.PendingNotificationRequest>>.value(
                  <_i10.PendingNotificationRequest>[],
                ),
          )
          as _i5.Future<List<_i10.PendingNotificationRequest>>);

  @override
  _i5.Future<List<_i10.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i5.Future<List<_i10.ActiveNotification>>.value(
              <_i10.ActiveNotification>[],
            ),
          )
          as _i5.Future<List<_i10.ActiveNotification>>);
}

/// A class which mocks [InitializationSettings].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitializationSettings extends _i1.Mock
    implements _i9.InitializationSettings {
  MockInitializationSettings() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [NotificationDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationDetails extends _i1.Mock
    implements _i11.NotificationDetails {
  MockNotificationDetails() {
    _i1.throwOnMissingStub(this);
  }
}
